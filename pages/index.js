import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";

const inter = Inter({ subsets: ["latin"] });
import { ConnectButton } from "@rainbow-me/rainbowkit";
import React, { useState, useEffect } from "react";
import { ethers } from "ethers";
import lighthouse from "@lighthouse-web3/sdk";
import { useAccount, useProvider, useSigner } from "wagmi";
const API_KEY = process.env.API_KEY;

export default function Home() {
  const [fileURL, setFileURL] = React.useState(null);
  const [event, setEvent] = useState();
  const [encryptedCID, setEncryptedCID] = useState();
  const provider = useProvider();
  const { data: signer } = useSigner();
  const { address } = useAccount();
  const encryptionSignature = async () => {
    console.log(address);
    const messageRequested = (await lighthouse.getAuthMessage(address)).data
      .message;
    console.log(messageRequested);
    const signedMessage = await signer.signMessage(messageRequested);
    console.log(signedMessage);
    return {
      signedMessage: signedMessage,
      publicKey: address,
    };
  };

  const progressCallback = (progressData) => {
    let percentageDone =
      100 - (progressData?.total / progressData?.uploaded)?.toFixed(2);
    console.log(percentageDone);
  };

  /* Deploy file along with encryption */
  const uploadFileEncrypted = async (e) => {
    /*
       uploadEncrypted(e, accessToken, publicKey, signedMessage, uploadProgressCallback)
       - e: js event
       - accessToken: your API key
       - publicKey: wallets public key
       - signedMessage: message signed by the owner of publicKey
       - uploadProgressCallback: function to get progress (optional)
    */
    const sig = await encryptionSignature();
    const response = await lighthouse.uploadEncrypted(
      e,
      API_KEY,
      sig.publicKey,
      sig.signedMessage,
      progressCallback
    );
    console.log(response);
    setEncryptedCID(response.data.Hash);
    // "QmdCCjY2RFztdgXJewMo2GKttn6TFead3XthARtAkF3eUP"
    /*
      output:
        data: {
          Name: "c04b017b6b9d1c189e15e6559aeb3ca8.png",
          Size: "318557",
          Hash: "QmcuuAtmYqbPYmPx3vhJvPDi61zMxYvJbfENMjBQjq7aM3"
        }
      Note: Hash in response is CID.
    */
  };

  const decrypt = async () => {
    // Fetch file encryption key
    const cid = "QmdCCjY2RFztdgXJewMo2GKttn6TFead3XthARtAkF3eUP"; //replace with your IPFS CID
    const { publicKey, signedMessage } = await encryptionSignature();
    /*
      fetchEncryptionKey(cid, publicKey, signedMessage)
        Parameters:
          CID: CID of the file to decrypt
          publicKey: public key of the user who has access to file or owner
          signedMessage: message signed by the owner of publicKey
    */
    const keyObject = await lighthouse.fetchEncryptionKey(
      cid,
      publicKey,
      signedMessage
    );

    // Decrypt file
    /*
      decryptFile(cid, key, mimeType)
        Parameters:
          CID: CID of the file to decrypt
          key: the key to decrypt the file
          mimeType: default null, mime type of file
    */
    console.log(keyObject);

    const fileType = "image/jpeg";
    const decrypted = await lighthouse.decryptFile(
      cid,
      keyObject.data.key,
      fileType
    );
    console.log(decrypted);
    // View File
    const url = URL.createObjectURL(decrypted);
    console.log(url);
    setFileURL(url);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>Lighthouse File Encryption</p>
          <div>
            Get Started by Connecting the Wallet
            <ConnectButton />
            <button onClick={() => uploadFileEncrypted(event)}>
              Encrypt File
            </button>
            <input onChange={(e) => setEvent(e)} type="file" />
            <br />
            <button onClick={() => decrypt()}>Decrypt File</button>
          </div>
        </div>

        <div className={styles.center}>{/* <img src={fileURL}></img> */}</div>
      </main>
    </>
  );
}
